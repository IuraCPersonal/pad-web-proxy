services:
  reservations:
    hostname: reservations
    container_name: reservations
    build:
      context: .
      dockerfile: ./apps/reservations/Dockerfile
      target: development
    command: pnpm run start:dev reservations
    env_file:
      - './apps/reservations/.env'
    ports:
      - '3009:3009'
    volumes:
      - .:/usr/src/app

  auth:
    hostname: auth
    container_name: auth
    build:
      context: .
      dockerfile: ./apps/auth/Dockerfile
      target: development
    command: pnpm run start:dev auth
    env_file:
      - './apps/auth/.env'
    ports:
      - '3001:3001'
    volumes:
      - .:/usr/src/app

  payments:
    hostname: payments
    container_name: payments
    build:
      context: .
      dockerfile: ./apps/payments/Dockerfile
      target: development
    command: pnpm run start:dev payments
    env_file:
      - './apps/payments/.env'
    ports:
      - '3003:3003'
    volumes:
      - .:/usr/src/app

  # redis-cache:
  #   image: redis:alpine
  #   hostname: redis-cache
  #   container_name: redis-cache
  #   restart: on-failure
  #   ports:
  #     - '6379:6379'
  #   command: redis-server
  #   volumes:
  #     - .:/usr/src/app

  reservations-db:
    image: mongo
    command: mongod --quiet --logpath /dev/null
    logging:
      driver: none

  auth-db:
    image: mongo
    command: mongod --quiet --logpath /dev/null
    logging:
      driver: none

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus:/etc/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - 9090:9090

  grafana:
    image: grafana/grafana
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - 3000:3000
    depends_on:
      - prometheus

volumes:
  grafana_data:
